{"version":3,"sources":["components/Note.js","components/AddNote.js","components/NotesList.js","components/Search.js","components/Header.js","App.js","index.js"],"names":["Note","id","text","date","handleDelete","className","onClick","size","AddNote","handleAddNote","useState","noteText","setNoteText","cols","rows","placeholder","onChange","event","target","value","length","trim","NotesList","notes","map","note","_id","Search","handleSearch","type","Header","handleToggleDarkMode","style","color","previousDarkMode","App","searchNote","setSearchNote","darkMode","setDarkMode","setNotes","useEffect","fetch","then","res","ok","json","jsonRes","filter","toLowerCase","includes","newNote","Date","toLocaleDateString","axios","post","delete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4af79737.chunk.js","sourcesContent":["import React from 'react'\r\nimport {MdDeleteForever} from 'react-icons/md'\r\n/*this is our note card component\r\nhere am using id,text,date,handleDeleteNote as props which have been defined in App.js*/\r\n\r\nfunction Note({id,text,date,handleDelete}) {\r\n    return (\r\n        <div className=\"note\">\r\n        {/*This part will contain the main note's text part*/}\r\n            <span>{text}</span>\r\n            {/*in the footer part of the note*/}\r\n            \r\n            <div className=\"note-footer\">\r\n            {/*it will store date on which the user is going to create the note*/} \r\n                <small>{date}</small>\r\n                {/*this is for deleting the note using each note's unique id as parameter\r\n                so we have passed handleDeleteNote function as it's onClick event*/}\r\n                <MdDeleteForever onClick={()=>handleDelete(id)} className=\"delete-icon\" size=\"1.3em\" />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Note\r\n","import React,{useState} from 'react'\r\n/*this component is for adding new note in our notes application*/\r\nfunction AddNote({handleAddNote}) {\r\n/*this noteText is the value for adding Note input*/\r\n    const [noteText,setNoteText] = useState('');\r\n    /*here I have fixed the note input limit with 300 characters , but you can change this\r\n    limit*/\r\n    const charLimit = 300;\r\n    /*this function is defined for the onChange event of out adding note input*/\r\n    const handleChange =(event)=>{\r\n   /*with typing the character limit will change with the input text's length*/\r\n    if(charLimit - event.target.value.length>=0){\r\n        setNoteText(event.target.value)\r\n    }\r\n   \r\n    }\r\n    /*this is for saving the new note*/\r\n    \r\n    const handleSaveClick =() =>{\r\n    /*if there's no character in input , then we will not save the note*/\r\n        if(noteText.trim().length>0){\r\n            handleAddNote(noteText);\r\n            setNoteText('');\r\n        }\r\n       \r\n    }\r\n    return (\r\n        <div className=\"note new\">\r\n        {/*the text area for our input*/}\r\n            <textarea  cols=\"10\" rows=\"8\" placeholder=\"Type to add a new note...\"\r\n            onChange={handleChange} value={noteText}\r\n            ></textarea>\r\n            <div className=\"note-footer\">\r\n                <small>{charLimit - noteText.length} Remaining</small>\r\n                <button className=\"save\" onClick={handleSaveClick}>Save</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNote\r\n","import React from 'react'\r\nimport Note from './Note'\r\nimport AddNote from './AddNote'\r\n/* this component is storing the notes in a format*/\r\n\r\nconst NotesList=({notes,handleAddNote,handleDelete}) =>{\r\n    return (\r\n        <div className=\"notes-list\">\r\n        {/*here we are going to use .map to make each note card from notes\r\n        and also passing the functions and other states as propas*/}\r\n           {notes.map((note)=>\r\n               <Note key={note._id} id={note._id} text={note.text} date={note.date}\r\n               handleDelete={handleDelete}\r\n               />\r\n           )}\r\n           <AddNote handleAddNote={handleAddNote}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotesList\r\n","import React from 'react'\r\nimport {MdSearch} from \"react-icons/md\"\r\n// this is our search component\r\n// here am using the handleSearchNote as props and we are going to use this\r\n// as our onClick event function for searching (this actual function has been defined in App.js)\r\nfunction Search({handleSearch}) {\r\n    return (\r\n        <div className=\"search\">\r\n        {/*this is our search icon within our search bar and I have fixed it's size to 1.3em*/}\r\n            <MdSearch className=\"search-icon\" size=\"1.4em\"/>\r\n            {/*this is the input tag for our search and here , I have used some onClick events for searching*/}\r\n            <input type=\"text\" placeholder=\"Search for your notes...\" onChange={(event)=>handleSearch(event.target.value)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nconst Header = ({handleToggleDarkMode}) => {\r\n    return (\r\n        <div className=\"header\">\r\n             {/* the heading of our notes app */}\r\n        <h1><span style={{color:\"#308d46\"}}>React</span> Notes</h1>\r\n         {/*this is our toggle button \r\n        using this button we can change the background theme for our application*/}\r\n        <button onClick={()=>handleToggleDarkMode((previousDarkMode)=>!previousDarkMode)} className=\"save\">Toggle Mode</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState,useEffect } from 'react'\r\nimport NotesList from './components/NotesList'\r\n// import {nanoid} from 'nanoid'\r\nimport axios from 'axios'\r\nimport Search from './components/Search';\r\nimport Header from './components/Header';\r\n\r\nfunction App() {\r\n\r\n  /*this are the staes for searching text and toggle mode*/\r\n  \r\n  const [searchNote,setSearchNote] = useState('');\r\n  const [darkMode,setDarkMode] = useState(false)\r\n\r\n/*here we are adding three dummy notes in our useState hooks for notes*/\r\n  const [notes,setNotes] = useState([\r\n  //   {\r\n  //   id: nanoid(),\r\n  //   text:\"This is my first note\",\r\n  //   date:\"03/11/2021\"\r\n  // },\r\n  // {\r\n  //   id: nanoid(),\r\n  //   text:\"This is my second note\",\r\n  //   date:\"03/11/2021\"\r\n  // },\r\n  // {\r\n  //   id: nanoid(),\r\n  //   text:\"This is my third note\",\r\n  //   date:\"03/11/2021\"\r\n  // },\r\n\r\n  {\r\n    _id: \"\",\r\n    text: \"\",\r\n    date: \"\"\r\n  }\r\n \r\n]);\r\n\r\n/*to store or save the data in local storage even after closing the tab*/\r\n\r\n// useEffect(()=>{\r\n//   const savedNotes = JSON.parse(localStorage.getItem('react-notes-app-data'))\r\n//   if(savedNotes){\r\n//     setNotes(savedNotes)\r\n//   }\r\n// },[])\r\n\r\nuseEffect(() => {\r\n  fetch(\"/notes-list\")\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n    })\r\n    .then((jsonRes) => setNotes(jsonRes));\r\n});\r\n\r\n\r\n/*this is for saving the app data in local storage*/\r\n// useEffect(()=>{\r\n//   localStorage.setItem('react-notes-app-data',JSON.stringify(notes))\r\n// },[notes])\r\n\r\n\r\n/*this function is for adding new note*/\r\nconst addNote = (text) =>{\r\n  \r\n  const date = new Date();\r\n  const newNote = {\r\n    // id:nanoid(),\r\n    text : text,\r\n    date : date.toLocaleDateString()\r\n  }\r\n  // const newNotes = [...notes,newNote]\r\n  // setNotes(newNotes)\r\n\r\n  axios.post(\"/create\", newNote);\r\n\r\n}\r\n/*this function is for deleting notes in note app with a id*/\r\nconst deletingNote = (id) =>{\r\n//  const newNotes = notes.filter((note)=> note.id!==id);\r\n//  setNotes(newNotes)\r\n\r\naxios.delete(\"/notes-list/\" + id)\r\n\r\n}\r\n  return (\r\n  \r\n    <div className={`${darkMode && 'dark-mode'}`}>\r\n          <div className=\"container\">\r\n      <Header handleToggleDarkMode={setDarkMode}/>\r\n\r\n      <Search handleSearch={setSearchNote}/>\r\n      \r\n      <NotesList notes={notes.filter((note)=>note.text.toLowerCase().includes(searchNote))} handleAddNote={addNote} handleDelete={deletingNote}/>\r\n\r\n    </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}